<?php
ini_set('display_errors', 1);
// error_reporting(E_ALL);

/**
 * ======================================================
 * 1. 초기화 및 의존성 로드 단계
 * ======================================================
 */

// Composer 의존성 라이브러리 자동 로드
// 모든 클래스를 자동으로 로드하기 위해 컴포저 오토로더를 등록합니다
require_once __DIR__ . '/../vendor/autoload.php';

// .env 파일에서 환경 변수 로드 (Dotenv 라이브러리 사용)
// 데이터베이스 연결 정보, API 키 등의 민감한 정보를 .env 파일에 보관하고 불러옵니다
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->safeLoad(); // .env 파일이 없을 경우에도 오류가 발생하지 않도록 safeLoad() 사용

// 공통 헬퍼 함수와 유효성 검사 헬퍼 함수 로드
// 애플리케이션 전반에서 사용되는 유틸리티 함수들을 로드합니다
require_once __DIR__ . '/../include/common.php';
require_once __DIR__ . '/../include/validation_helper.php';

/**
 * ======================================================
 * 2. 기본 서비스 설정 단계 (데이터베이스, 로깅)
 * ======================================================
 */

// PDO 데이터베이스 연결 객체 생성
// config/database.php에서 PDO 인스턴스를 생성하고 반환합니다
$pdo = require __DIR__ . '/../config/database.php';

// Monolog 로깅 설정 및 로거 인스턴스 생성
// 애플리케이션 로그를 기록하기 위한 로거 인스턴스를 설정합니다
$logger = require __DIR__ . '/../config/logging.php';

// 커스텀 DB 클래스 인스턴스 생성 (PDO를 감싸는 클래스)
// PDO와 로거를 주입받아 데이터베이스 작업을 쉽게 수행하는 DB 클래스 인스턴스를 생성합니다
$db = new \App\Core\DB($pdo, $logger);

/**
 * ======================================================
 * 3. 라우팅 설정 단계
 * ======================================================
 */

// FastRoute 라이브러리를 사용한 라우터 설정
// HTTP 메서드와 URI 패턴에 따라 실행할 컨트롤러와 메서드를 매핑합니다
$dispatcher = FastRoute\simpleDispatcher(function (FastRoute\RouteCollector $r) {
    /**
     * 일반 웹 페이지 컨트롤러 (View)
     * 사용자에게 HTML 페이지를 반환하는 라우트를 정의합니다
     */
    $r->addRoute('GET', '/',                   ['App\Controllers\HomeController', 'index']);
    $r->addRoute('GET', '/login',              ['App\Controllers\HomeController', 'login']);
    $r->addRoute('GET', '/register',           ['App\Controllers\HomeController', 'register']);
    $r->addRoute('GET', '/logout',             ['App\Controllers\HomeController', 'logout']);
    $r->addRoute('GET', '/dashboard',          ['App\Controllers\HomeController', 'dashboard']);
    
    // 인플루언서 관리 라우트
    // 인플루언서 정보를 조회, 생성, 수정, 삭제하는 라우트를 정의합니다
    $r->addRoute('GET', '/influencers',              ['App\Controllers\InfluencerController', 'index']);
    $r->addRoute('GET', '/influencers/form',         ['App\Controllers\InfluencerController', 'form']);
    $r->addRoute('GET', '/influencers/form/{id:\d+}', ['App\Controllers\InfluencerController', 'form']);
    $r->addRoute('GET', '/influencers/search',       ['App\Controllers\InfluencerController', 'search']);
    $r->addRoute('POST', '/influencers/search',      ['App\Controllers\InfluencerController', 'doSearch']);
    $r->addRoute('GET', '/influencers/{id:\d+}',     ['App\Controllers\InfluencerController', 'show']);
    $r->addRoute('POST', '/influencers/save',        ['App\Controllers\InfluencerController', 'save']);
    $r->addRoute('GET', '/influencers/delete/{id:\d+}', ['App\Controllers\InfluencerController', 'delete']);
    
    /**
     * API 컨트롤러 (JSON)
     * JSON 형식으로 데이터를 주고받는 RESTful API 라우트를 정의합니다
     */
    // 인증 API 라우트
    $r->addRoute('POST', '/api/auth/login',    ['App\Controllers\Api\AuthApiController', 'login']);
    $r->addRoute('POST', '/api/auth/register', ['App\Controllers\Api\AuthApiController', 'register']);
    
    // 인플루언서 API 라우트
    $r->addRoute('GET',    '/api/influencers',          ['App\Controllers\Api\InfluencerApiController', 'index']);
    $r->addRoute('GET',    '/api/influencers/{id:\d+}', ['App\Controllers\Api\InfluencerApiController', 'show']);
    $r->addRoute('POST',   '/api/influencers',          ['App\Controllers\Api\InfluencerApiController', 'store']);
    $r->addRoute('DELETE', '/api/influencers/{id:\d+}', ['App\Controllers\Api\InfluencerApiController', 'delete']);
    $r->addRoute('POST',   '/api/influencers/import',   ['App\Controllers\Api\InfluencerApiController', 'import']);
    
    // 사용자 관리 API 라우트
    $r->addRoute('GET',    '/api/users',          ['App\Controllers\Api\UserApiController', 'index']);
    $r->addRoute('GET',    '/api/users/{id:\d+}', ['App\Controllers\Api\UserApiController', 'show']);
    $r->addRoute('PUT',    '/api/users/{id:\d+}', ['App\Controllers\Api\UserApiController', 'update']);
    
    // 로그 API 라우트
    $r->addRoute('GET',    '/api/logs',          ['App\Controllers\Api\LogApiController', 'index']);
    $r->addRoute('GET',    '/api/logs/{id:\d+}', ['App\Controllers\Api\LogApiController', 'show']);
});

/**
 * ======================================================
 * 4. 애플리케이션 및 미들웨어 설정 단계
 * ======================================================
 */

// 애플리케이션 인스턴스 생성
// 라우터, DB, 로거를 주입받아 애플리케이션 인스턴스를 생성합니다
$app = new \App\Core\App($dispatcher, $db, $logger);

// 미들웨어 등록 (실행 순서가 중요)
// 미들웨어는 등록된 순서대로 실행되며, 각 미들웨어는 다음 미들웨어로 요청을 전달합니다

// 1. 세션 미들웨어: 세션 시작 및 관리
// 세션을 시작하고, 세션 쿠키 설정, 세션 타임아웃, 세션 고정 공격 방지 등을 처리합니다
$app->addMiddleware(new \App\Core\Middleware\SessionMiddleware());

// 2. 인증 미들웨어: 사용자 인증 상태 확인
// 보호된 라우트에 대한 접근 시 사용자 로그인 상태를 확인하고, 
// 인증되지 않은 사용자는 로그인 페이지로 리다이렉트합니다
$app->addMiddleware(new \App\Core\Middleware\AuthMiddleware());

// 3. CSRF 보호 미들웨어: CSRF 토큰 검증
// CSRF 공격을 방지하기 위해 폼 제출 시 CSRF 토큰을 검증합니다
$app->addMiddleware(new \App\Core\Middleware\CsrfMiddleware());

/**
 * ======================================================
 * 5. 요청 처리 및 애플리케이션 실행 단계
 * ======================================================
 */

// 요청 객체 생성
// HTTP 요청 정보를 캡슐화하는 Request 객체를 생성합니다
// 이 객체는 $_GET, $_POST, $_SERVER 등의 슈퍼글로벌 변수를 안전하게 접근할 수 있게 해줍니다
$request = new \App\Core\Http\Request();

// 애플리케이션 실행
// 다음과 같은 순서로 실행됩니다:
// 1. 미들웨어 체인 실행 (SessionMiddleware -> AuthMiddleware -> CsrfMiddleware)
// 2. 라우터 미들웨어 실행 (URI에 맞는 컨트롤러와 메서드 결정)
// 3. 컨트롤러 메서드 실행
// 4. 응답 객체 생성 및 전송
$app->run($request); 