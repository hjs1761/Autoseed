<?php
/**
 * 파일: app/Core/App.php
 * 
 * 이 파일은 애플리케이션의 기본 클래스를 정의합니다.
 * 미들웨어 스택을 관리하고 요청을 처리합니다.
 */

namespace App\Core;

use App\Core\Http\Request;
use App\Core\Http\Response;
use App\Core\Middleware\MiddlewareInterface;
use FastRoute\Dispatcher;

/**
 * 애플리케이션 클래스
 * 
 * 이 클래스는 애플리케이션의 핵심 로직을 담당하며 다음과 같은 역할을 합니다:
 * 1. 미들웨어 스택 관리
 * 2. 요청 처리 및 라우팅
 * 3. 응답 생성 및 전송
 */
class App
{
    /**
     * 미들웨어 스택 - 요청 처리 파이프라인을 구성하는 미들웨어 객체들을 저장
     * @var array
     */
    private array $middlewares = [];
    
    /**
     * 라우터 인스턴스 - URI와 HTTP 메서드에 따라 실행할 컨트롤러를 결정
     * @var Dispatcher
     */
    private $router;
    
    /**
     * DB 인스턴스 - 데이터베이스 연결 및 쿼리 실행을 담당
     * @var DB
     */
    private $db;
    
    /**
     * 로거 인스턴스 - 애플리케이션 로그 기록을 담당
     * @var \Monolog\Logger
     */
    private $logger;
    
    /**
     * 애플리케이션 생성자 - 의존성 주입을 통해 필요한 서비스 객체들을 받음
     * 
     * @param Dispatcher $router 라우터 인스턴스
     * @param DB $db DB 인스턴스
     * @param \Monolog\Logger $logger 로거 인스턴스
     */
    public function __construct(Dispatcher $router, DB $db, $logger)
    {
        // 의존성을 속성에 저장
        $this->router = $router;
        $this->db = $db;
        $this->logger = $logger;
    }
    
    /**
     * 미들웨어 추가 메서드
     * 미들웨어 객체를 미들웨어 스택에 추가하는 메서드
     * 등록된 순서대로 실행됨
     * 
     * @param MiddlewareInterface $middleware 미들웨어 인스턴스
     * @return $this 메서드 체이닝을 위한 현재 객체 반환
     */
    public function addMiddleware(MiddlewareInterface $middleware): self
    {
        // 미들웨어 스택에 미들웨어 추가
        $this->middlewares[] = $middleware;
        return $this;
    }
    
    /**
     * 애플리케이션 실행 메서드
     * 미들웨어 스택과 라우터를 통해 요청을 처리하고 응답을 반환
     * 
     * @param Request $request 요청 객체
     * @return void
     */
    public function run(Request $request): void
    {
        // 요청 처리 로직 실행 및 응답 생성
        $response = $this->handleRequest($request);
        
        // 응답 전송 (HTTP 상태 코드, 헤더, 본문 출력)
        $response->send();
    }
    
    /**
     * 요청 처리 메서드
     * 미들웨어 스택을 실행하여 요청을 처리하고 응답을 생성
     * 
     * @param Request $request 요청 객체
     * @return Response 응답 객체
     */
    private function handleRequest(Request $request): Response
    {
        // 미들웨어 실행 함수 생성
        $runner = $this->createMiddlewareRunner();
        
        // 미들웨어 스택 실행 후 응답 반환
        return $runner($request);
    }
    
    /**
     * 미들웨어 실행 함수 생성 메서드
     * 미들웨어 스택을 실행할 클로저 함수를 생성
     * 
     * 미들웨어 실행 흐름:
     * 1. 등록된 미들웨어가 순차적으로 실행됨 (SessionMiddleware -> AuthMiddleware -> CsrfMiddleware)
     * 2. 마지막으로 라우터 미들웨어가 실행되어 컨트롤러와 메서드를 결정하고 실행
     * 3. 컨트롤러에서 반환된 결과가 Response 객체로 변환되어 반환
     * 
     * @return callable 미들웨어 실행 함수
     */
    private function createMiddlewareRunner(): callable
    {
        // 등록된 미들웨어 배열에 라우터 미들웨어를 추가
        // 라우터 미들웨어는 항상 마지막에 실행되어 URI에 맞는 컨트롤러를 실행
        $middlewares = array_merge($this->middlewares, [
            // 익명 클래스로 라우터 미들웨어 구현
            // 이 미들웨어는 URI와 HTTP 메서드에 따라 컨트롤러를 실행하는 역할을 함
            new class($this->router, $this->db, $this->logger) implements MiddlewareInterface {
                private $router;
                private $db;
                private $logger;
                
                public function __construct($router, $db, $logger)
                {
                    $this->router = $router;
                    $this->db = $db;
                    $this->logger = $logger;
                }
                
                /**
                 * 라우터 미들웨어의 핵심 로직
                 * FastRoute 라이브러리를 사용하여 URI와 HTTP 메서드에 맞는 컨트롤러를 실행
                 */
                public function process($request, callable $next)
                {
                    // 요청 메서드와 URI 추출
                    $method = $request->getMethod();
                    $uri = $request->getUri();
                    
                    // FastRoute를 사용하여 URI와 메서드에 맞는 라우트 정보 조회
                    $routeInfo = $this->router->dispatch($method, $uri);
                    
                    // 라우트 정보에 따른 처리
                    switch ($routeInfo[0]) {
                        // 라우트를 찾을 수 없는 경우
                        case Dispatcher::NOT_FOUND:
                            return new Http\Response('404 Not Found', 404);
                        
                        // 메서드가 허용되지 않는 경우
                        case Dispatcher::METHOD_NOT_ALLOWED:
                            return new Http\Response('405 Method Not Allowed', 405);
                        
                        // 라우트를 찾은 경우
                        case Dispatcher::FOUND:
                            // 라우트 핸들러 (컨트롤러와 메서드) 및 매개변수 추출
                            $handler = $routeInfo[1]; // [컨트롤러 클래스, 메서드]
                            $vars = $routeInfo[2];    // URL에서 추출한 매개변수 (예: id)
                            
                            // 컨트롤러 클래스와 메서드 분리
                            [$class, $method] = $handler;
                            
                            // 컨트롤러 인스턴스 생성 (DB와 로거 주입)
                            $controller = new $class($this->db, $this->logger);
                            
                            // 요청 객체를 첫 번째 매개변수로 전달
                            // 이로써 모든 컨트롤러 메서드는 Request 객체를 받을 수 있음
                            $vars = array_merge([$request], $vars);
                            
                            // 컨트롤러 메서드 호출
                            $result = call_user_func_array([$controller, $method], $vars);
                            
                            // 컨트롤러에서 반환된 결과를 Response 객체로 변환
                            if (!($result instanceof Http\Response)) {
                                if (is_array($result) || is_object($result)) {
                                    // 배열이나 객체는 JSON 응답으로 변환
                                    $result = new Http\JsonResponse($result);
                                } else {
                                    // 그 외에는 일반 텍스트 응답으로 변환
                                    $result = new Http\Response($result);
                                }
                            }
                            
                            return $result;
                    }
                }
            }
        ]);
        
        /**
         * 미들웨어 실행 함수 정의 (재귀적 구조)
         * 
         * 이 함수는 미들웨어 스택을 순차적으로 실행하는 재귀 구조의 클로저입니다.
         * 각 미들웨어는 다음 미들웨어를 호출할 수 있는 콜백 함수를 전달받아
         * 자신의 로직을 실행한 후 다음 미들웨어를 호출하거나 요청 처리를 종료할 수 있습니다.
         */
        $runner = function ($request, $middlewares, $index = 0) use (&$runner) {
            // 모든 미들웨어를 실행한 경우 빈 응답 반환
            if ($index >= count($middlewares)) {
                return new Http\Response('');
            }
            
            // 현재 미들웨어 가져오기
            $middleware = $middlewares[$index];
            
            // 현재 미들웨어 실행 및 다음 미들웨어를 호출할 콜백 전달
            // 미들웨어는 process 메서드에서 요청을 처리하고 다음 미들웨어에 요청을 전달하거나
            // 직접 응답을 생성하여 반환할 수 있음
            return $middleware->process($request, function ($request) use ($runner, $middlewares, $index) {
                // 다음 미들웨어 실행 (재귀 호출)
                return $runner($request, $middlewares, $index + 1);
            });
        };
        
        // 미들웨어 스택 실행을 시작하는 클로저 반환
        return function ($request) use ($runner, $middlewares) {
            // 첫 번째 미들웨어부터 실행
            return $runner($request, $middlewares, 0);
        };
    }
} 